(1) Способы создания стримов
1 - Создание стрима из коллекции
collection.stream()
2 - Создание стрима из значений
Stream.of(значение1,… значениеN)
3 - Создание стрима из массива
Arrays.stream(массив)
4 - Создание стрима из файла
Files.lines(путь_к_файлу)
5 - Создание стрима из строки
«строка».chars()
6 - С помощью Stream.builder
Stream.builder().add(...)....build()
7 - Создание параллельного стрима
collection.parallelStream()
8 - Создание бесконечных стрима с помощью Stream.iterate
Stream.iterate(начальное_условие, выражение_генерации)
9 - Создание бесконечных стрима с помощью Stream.generate
Stream.generate(выражение_генерации)

(2) Что такое терминальный оператор (+ привести примеры таких)?
Терминальные операторы — обрабатывают элементы и завершают
работу стрима, так что терминальный оператор в цепочке может быть только один.
stream.filter(x-> x.toString().length() == 3)
		.map(x -> x + " - the length of the letters is three")
			.forEach(x -> System.out.println(x));
forEach - терминальный оператор

(3) Зачем нужны параллельные стримы?
Распараллеливание потоков позволяет задействовать несколько ядер процессора
(если целевая машина многоядерная) и тем самым может повысить
производительность и ускорить вычисления.